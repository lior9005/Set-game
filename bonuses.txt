BONUS CHALLENGE FORM
--------------------

For each bonus challenge you have implemented, please replace the sentence "We are not entitled to this bonus."
with a short description of:

1. How it was implemented in your code
2. Where it was used (in which class methods).
3. How you tested that it is working correctly.

--------------------

1. Fully supporting all configuration fields and avoiding the use of magic numbers

    1. as implemented in the code, there is no use of magic numbers

--------------------

2. Terminating all threads (that you created) gracefully and in reverse order to the order they were created in.

2.1:
    the only threads that are created are the dealer, the players and their corresponding ai threads.
    the dealer terminate() method calls the terminate() method for each player in a loop.
    in the player terminate() method we've used the 'join' method on the player thread, therefore the dealer thread only execute the terminate method on one player thread, and will wait until its terminated.
    because the loop is in reversed order the threads will be terminated in a reversed order.
    if the player is an ai player, the player thread will clear it corresponding interrupt flag (if it was 'true') and then will wait for its ai thread to be terminated.
    we've test this challenge using the logs - we can see that the thread are closing in the desired order.
--------------------

3. Handling the config.turnTimeoutMillis value as follows:
config.turnTimeoutMillis < 0: display nothing.
config.turnTimeoutMillis = 0: display a timer since the last action (reshuffle or set collected).
Note: in modes without a countdown timer the dealer must ensure there is always at least one legal set on the table.

We are not entitled to this bonus.

--------------------

4. Making sure that the threads do not wake up unless some actual job needs to be done (e.g., a value needs to be
changed on the display, key input needs to be handled, etc.) and the only threads created by you are:
1 thread per player + 1 additional thread for non-human players.

we didnt create any additional threads except the player and the ai thread.
*ai thread*
    by using the ArrayBlockingQueue, the ai wont generate keypresses if the queue is full
*player thread*
    using the ArrayBlockingQueue aswell, the playerthread wont wake up until he has an action to do, and also will be blocked if the dealer is using the table
*dealer thread*
    the dealer thread works in a loop, waking up only after 1 second of sleep,when needed to change cards according to the turnTimeoutMillis and update the timer display, the dealer also checks if there are any sets to check
    when a player interrupt the dealer using the dealer's 'declareSet' method, if the dealer is sleeping inside the sleepUntilWokenOrTimeout() method, it will wake up and continue in the loop, therefore checking the set without waiting for it sleep period to end.



